{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/bootstrap/tools.tsx","webpack://gatsby-starter-default/./src/components/bootstrap/Icon.tsx","webpack://gatsby-starter-default/./src/components/bootstrap/Rows.tsx","webpack://gatsby-starter-default/./src/components/bootstrap/Badge.tsx","webpack://gatsby-starter-default/./src/pages/about.tsx"],"names":["mapSizes","set","fn","Object","keys","sizeClassesFromSet","map","size","buildClass","values","filter","e","join","mergeClasses","classes","withClass","object","newClassNames","className","nodes","spacer","shift","node","key","Fragment","Icon","children","icon","props","IconBackground","bgColor","columnSizePrefix","classesFromColumnSize","columns","sizeClass","bc","push","offset","Row","Col","sizes","columnSizes","value","Badge","textColor","Badges","badges","badge","Heading","ColumnHeader","title","FloatingIcon","useStaticQuery","allWorkhistoryYaml","allTechYaml","workHistory","edges","techHistory","tool","name","description","versions","style","fontSize","related","part","organization","positions","position","yearStart","yearEnd"],"mappings":"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","file":"component---src-pages-about-tsx-b50f18318c996e3d5be6.js","sourcesContent":["import React, { ReactNode as Node, Fragment } from \"react\";\n\n// Bootstrap Common Values\nexport type SizeClassInfix = \"\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"xxl\";\nexport type SizeClassSet<V> = { \n  [key in SizeClassInfix]?: V\n};\n\nexport const sizeClassesFromSet = <V extends unknown>(set: SizeClassSet<V>): SizeClassInfix[] => {\n  return Object.keys(set) as SizeClassInfix[];\n};\n\nexport const mapSizes = <V extends unknown, U extends unknown>(\n  set: SizeClassSet<V>, \n  fn: (value: V, size: SizeClassInfix) => U\n): U[] => {\n  return sizeClassesFromSet(set)\n    .map((size: SizeClassInfix) => {\n      return fn(set[size] as V, size);\n    });\n};\n\n\n// Columns\nexport type ColumnSize = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n\n// Padding and Margin\nexport type MPSides = \"t\" | \"e\" | \"b\" | \"s\" | \"x\" | \"y\" | \"\" | undefined;\nexport type MPScaler = 0 | 1 | 2 | 3 | 4 | 5 | \"auto\";\nexport type MPType = \"m\" | \"p\";\n\ntype ClassComponent = (string | number | null | undefined);\nexport const buildClass = (...values: ClassComponent[]): string => {\n  return values.filter(e => e != null && e != \"\").join(\"-\");\n};\n\nconst bc = buildClass;\n\nexport const infix = (value: string | number | undefined): string => {\n  return value ? \"-\" + value + \"-\" : \"-\";\n};\n\nexport const classesFromSizes = <V extends ClassComponent>(prefix: string, values: SizeClassSet<V>): string => {\n  return mapSizes(values, (value, size) => bc(prefix, size, value)).join(\" \");\n};\n\nexport interface ClassNamed {\n  className?: string;\n}\n\ntype ClassOrNot = string | undefined;\nexport const mergeClasses = (...classes: ClassOrNot[]): string => {\n  return classes.filter(e => e != null && e != \"\").join(\" \");\n};\n\n\n// withClass adds in the extra classes into the object provided using a shallow copy.\nexport const withClass = <T extends ClassNamed>(object: T, ...newClassNames: string[]): T => {\n  return { \n    ...object, \n    className: mergeClasses(object.className, ...newClassNames)\n  };\n};\n\n\n\n// Join take an array of elements and creates an array where each node inside of\n// the array is spaced by the spacer, which is a space by default. This is super\n// helpful for rendering multiple joining text pieces.\n//\n// Example: [\"<p>A</p>\", \"<p>B</p>\"] becomes [\"<p>A</p>\", \" \", \"<p>B</p>\"];\n//\nexport const join = (nodes: Node[], spacer: Node = \" \") => (\n  <>\n    {nodes.shift()}\n    {nodes.map(((node: Node, key: number) => <Fragment key={key}>{spacer}{node}</Fragment>))}\n  </>\n);","import React from \"react\";\n\nimport { withClass } from \"./tools\";\n\nexport interface IconProps extends React.HTMLProps<HTMLElement> {\n  icon: string;\n}\n\nexport const Icon = ({children, icon, ...props}: IconProps) => (\n  <i {...withClass(props, \"bi\", `bi-${icon}`)}>{children}</i>\n);\n\n\nexport interface IconBackgroundProps extends React.HTMLProps<HTMLDivElement> {\n  bgColor?: string;\n};\n\nexport const IconBackground = ({ children, bgColor = \"secondary\", ...props }: IconBackgroundProps) => (\n  <div {...withClass(props, \"feature-icon\", `bg-${bgColor}`, \"bg-gradient\")}>{children}</div>\n);\n\nexport default Icon;","import React from \"react\";\n\nimport { buildClass as bc, SizeClassInfix, classesFromSizes, withClass, mapSizes } from \"./tools\";\n\nexport type RowColumnScaler = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nexport type RowColumnAuto = \"auto\";\nexport type RowColumnsSizeClass = {\n  [key in SizeClassInfix]?: RowColumnScaler;\n};\nexport type RowColumns = RowColumnScaler | RowColumnsSizeClass | RowColumnAuto;\n\n\nexport const rowColsPrefix = \"row-cols\";\nexport const classesFromRowColumns = (rowColumns: RowColumns) => {\n  if (typeof rowColumns === \"number\" || rowColumns === \"auto\") {\n    return bc(rowColsPrefix, rowColumns as number | string);\n  }\n  \n  return classesFromSizes(rowColsPrefix, rowColumns);\n};\n\n\n// offsets go 0 to 11, col size is 1 to 12 and auto.\nexport type ColumnSizeScalar =  \"auto\" | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | undefined;\nexport type ColumnOffsetSizeScaler = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\n\nexport type ColumnSizeWithOffset = {\n  size?: ColumnSizeScalar;\n  offset?: ColumnOffsetSizeScaler;\n};\n\nexport type ColumnSize = ColumnSizeScalar | ColumnSizeWithOffset;\n\nexport type ColumnOffsetSizeClasses = {\n  [key in SizeClassInfix]?: ColumnSize;\n};\n\nexport type ColumnSizes = ColumnSize | ColumnOffsetSizeClasses; \n\nconst columnSizePrefix = \"col\";\nconst columnOffsetPrefix = \"offset\";\nconst classesFromColumnSize = (columns: ColumnSize, sizeClass?: SizeClassInfix): string => {\n  if (typeof columns !== 'object' || columns === null) {\n    return bc(columnSizePrefix, sizeClass, columns as ColumnSizeScalar);\n  }\n\n  var classes = [];\n  if (\"size\" in columns) {\n    classes.push(bc(columnSizePrefix, sizeClass, columns.size))\n  }\n\n  if (\"offset\" in columns) {\n    classes.push(bc(columnOffsetPrefix, sizeClass, columns.offset))\n  }\n\n  return classes.join(\" \");\n};\n\nexport const colSizeClasses = (sizes: ColumnSizes): string => {\n  if (typeof sizes !== 'object' || sizes === null) {\n    return bc(columnSizePrefix, sizes as number | string | \"auto\");\n  }\n\n  if (\"size\" in sizes || \"offset\" in sizes) {\n    return classesFromColumnSize(sizes);\n  }\n\n  return mapSizes(sizes as ColumnOffsetSizeClasses, (value: ColumnSize, size: SizeClassInfix) => {\n    return classesFromColumnSize(value, size);\n  }).join(\" \");\n};\n\n\nexport const Row = ({children, ...props}: React.HTMLProps<HTMLDivElement>) => (\n  <div { ...withClass(props, \"row\")}>\n    {children}\n  </div>\n);\n\nexport interface ColProps extends React.HTMLProps<HTMLDivElement> {\n  columnSizes?: ColumnSizes;\n};\n\nexport const Col = ({children, columnSizes, ...props}: ColProps) => (\n  <div { ...withClass(props, colSizeClasses(columnSizes))}>\n    {children}\n  </div>\n);\n","import React, { ReactNode as Node } from \"react\";\nimport { join, withClass } from \"./tools\";\n\nexport interface BadgeProps extends React.HTMLProps<HTMLSpanElement> {\n  bgColor?: string;\n}\n\nexport const Badge = ({ children, bgColor = \"secondary\", ...props }: BadgeProps) => {\n  var textColor = \"\";\n  if (bgColor === \"warning\" || bgColor === \"info\" || bgColor === \"light\") {\n    textColor = \"text-dark\";\n  }\n  return (\n    <span {...withClass(props, \"badge\", `bg-${bgColor}`, textColor)}>{children}</span>\n  )\n};\n\n\nexport interface BadgesProps extends React.HTMLProps<HTMLSpanElement> {\n  badges: Node[];\n}\n\nexport const Badges = ({ badges, ...props}: BadgesProps) => join(\n  badges.map((badge, key) => <Badge key={key} {...props}>{badge}</Badge>)\n);\n\nexport default Badge;","import { useStaticQuery, graphql } from \"gatsby\"\n\nimport React, { Fragment, ReactNode as Node } from \"react\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nimport { withClass } from \"../components/bootstrap/tools\";\nimport { Icon, IconBackground } from \"../components/bootstrap/Icon\";\nimport { Row, Col, ColumnOffsetSizeClasses } from \"../components/bootstrap/Rows\";\nimport { Badges } from \"../components/bootstrap/Badge\";\n\nimport \"../components/bootstrap/features/feature.css\";\n\n\ninterface Tool {\n  name: string;\n  icon: string;\n  years: number;\n  proficiency: number;\n  versions: string[];\n  related: string[];\n  description: string;\n}\n\ninterface Position {\n  title: string;\n  yearStart: number;\n  yearEnd?: number;\n  description?: string;\n}\n\ninterface Part {\n  organization: string;\n  icon: string;\n  positions: Position[];\n}\n\n\ninterface HeadingProps extends React.HTMLProps<HTMLHeadingElement> {};\n\nconst Heading = ({ children, ...props }: HeadingProps) => (\n  <h2 {...withClass(props, \"border-bottom\", \"mb-5\")}>{children}</h2>\n);\n\ninterface ColumnHeaderProps {\n  title: string;\n};\n\nconst ColumnHeader = ({ title }: ColumnHeaderProps) => (\n    <div className=\"border-bottom pt-2\">\n      <h4>{title}</h4>\n    </div>\n);\n\n\ninterface FloatingIconProps extends React.HTMLProps<HTMLDivElement> {\n  icon: Node;\n};\n\nconst FloatingIcon = ({ children, icon, ...props}: FloatingIconProps) => (\n  <div {...withClass(props, \"mb-5\", \"d-flex\", \"align-items-start\")}>\n    <div className=\"flex-shrink-0\">\n      {icon}\n    </div>\n    <div>\n      {children}\n    </div>\n  </div>\n);\n\nconst columns: ColumnOffsetSizeClasses = {\"\": 12, \"md\": 6, \"xl\": 4};\nconst AboutPage = () => {\n  const { allWorkhistoryYaml, allTechYaml } = useStaticQuery(graphql`\n    query WorkHistory {\n      allTechYaml {\n        nodes {\n          icon\n          description\n          name\n          proficiency\n          related\n          versions\n          years\n        }\n      }\n      allWorkhistoryYaml {\n        edges {\n          node {\n            id\n            icon\n            organization\n            positions {\n              title\n              yearEnd\n              yearStart\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const workHistory = allWorkhistoryYaml.edges.map(({ node }: any) => (node))\n  const techHistory = allTechYaml.nodes;\n\n  return (\n    <Layout>\n      <SEO title=\"About Me\" />\n      <div className=\"text-center mb-5\">\n        <h1>About Me</h1>\n        <p className=\"lead\">I've worked places. I've done things.</p>\n      </div>\n\n      <Row>\n        <Col className=\"text-center\" columnSizes={12}>\n          <Heading>Tools I've Used</Heading>\n        </Col>\n\n        {techHistory.map((tool: Tool, key: any) => (\n          <Col key={key} columnSizes={columns} className=\"pe-md-5\">\n            <FloatingIcon icon={(\n              <IconBackground className=\"me-3 mb-0\" bgColor={\"primary\"}>\n                <Icon icon={tool.icon} />\n              </IconBackground>\n            )}>\n              <ColumnHeader title={tool.name} />\n              <p>{tool.description}</p>\n              {tool?.versions && (\n                  <p style={{fontSize: \"0.75rem\"}}><strong>Versions:</strong> <Badges badges={tool.versions} className=\"mb-1\" /></p>\n              )}\n              {tool?.related && (\n                  <p style={{fontSize: \"0.75rem\"}}><strong>Related:</strong> <Badges badges={tool.related} className=\"mb-1\" /></p>\n              )}\n            </FloatingIcon>\n          </Col>\n        ))}\n\n\n        <Col className=\"text-center\" columnSizes={12}>\n          <Heading>Jobs I've Had</Heading>\n        </Col>\n\n        {workHistory.map((part: Part, key: number) => (\n          <Col columnSizes={columns} className=\"ps-md-5\">\n            <div key={key} className=\"mb-5 d-flex align-items-start\">\n              <div className=\"flex-shrink-0\">\n                <IconBackground className=\"me-3 mb-0\" bgColor={\"primary\"}>\n                  <Icon icon={part.icon} />\n                </IconBackground>\n              </div>\n\n              <div>\n                <ColumnHeader title={part.organization} />\n\n                {part.positions.map((position: Position, key: number) => (\n                  <Fragment key={key}>\n                    <p>\n                      {position?.description}\n                    </p>\n                    <p>\n                      <strong>\n                        From {position.yearStart}\n                        {position.yearEnd && ` until ${position.yearEnd}`}\n                      </strong>\n                    </p>\n                  </Fragment>\n                ))}\n              </div>\n            </div>\n          </Col>\n        ))}\n\n      </Row>\n    </Layout>\n  );\n};\n\nexport default AboutPage\n"],"sourceRoot":""}